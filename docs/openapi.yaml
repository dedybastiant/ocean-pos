openapi: "3.0.3"
info:
  title: Ocean POS - API Documentation
  version: "1.0"
servers:
  - url: https://localhost:8080/v1/api
paths:
  /auth:
    post:
      summary: Login
      description: API for Login
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: success
  /users:
    post:
      summary: Register
      description: API for register new user
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: Success add new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: success add new user
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyEmail:
                  summary: Empty email
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: email can't be empty
                emptyPassword:
                  summary: Empty password
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: password can't be empty
                emptyName:
                  summary: Empty name
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: name can't be empty
                emptyPhoneNumber:
                  summary: Empty phone number
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: phone number can't be empty
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate user email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              examples:
                duplicateEmail:
                  summary: Duplicate email
                  value:
                    code: 409
                    status: CONFLICT
                    description: email already used
                duplicatePhone:
                  summary: Duplicate phone number
                  value:
                    code: 409
                    status: CONFLICT
                    description: phone number already useds
    get:
      summary: Get user lists
      description: API for get user lists
      tags:
        - "User"
      responses:
        "200":
          description: Success get user lists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserList"
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /users/{userId}:
    put:
      summary: Change user data
      description: API for change user data
      tags:
        - "User"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success update user data
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              example:
                code: 400
                status: BAD_REQUEST
                description: name can't be empty
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
    get:
      summary: Get user by id
      description: API for get user by id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Success get user data
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success update user email
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundResponse"
              example:
                code: 404
                status: NOT_FOUND
                description: user not found
  /users/{userId}/email:
    put:
      summary: Change email
      description: API for change user email
      tags:
        - "User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEmailRequest"
      responses:
        "200":
          description: Success update email
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success update user email
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyEmail:
                  summary: Empty email
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: email can't be empty
                invalidEmailFormat:
                  summary: Invalid email format
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: email format is invalid
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate user email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              example:
                code: 409
                status: CONFLICT
                description: email already used
  /users/{userId}/password:
    put:
      summary: Change password
      description: API for change password
      tags:
        - "User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          description: Success update password
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success change password
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyPassword:
                  summary: Empty password
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: password can't be empty
                invalidFormat:
                  summary: Invalid password format
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: password should contain uppercase, lowercase, number and symbol
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /users/{userId}/phone:
    put:
      summary: Change phone number
      description: API for change user phone number
      tags:
        - "User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePhoneNumberRequest"
      responses:
        "200":
          description: Success update phone number
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success change phone number
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyPassword:
                  summary: Empty password
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: password can't be empty
                invalidFormat:
                  summary: Invalid password format
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: password should contain uppercase, lowercase, number and symbol
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate user email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              example:
                code: 409
                status: CONFLICT
                description: email already exists
  /users/{userId}/email/verify:
    post:
      summary: Verify email
      description: API for verify user email and this is the main verification of the user account
      tags:
        - "User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailOrPhone"
      responses:
        "200":
          description: Success verify email
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success verify email
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyEmail:
                  summary: Invaid OTP
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: otp is invalid
                emptyPassword:
                  summary: Expired OTP
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: otp is expired
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate user email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              example:
                code: 409
                status: CONFLICT
                description: email already verified
  /users/{userId}/phone/verify:
    post:
      summary: Verify phone number
      description: API for verify user phone number
      tags:
        - "User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailOrPhone"
      responses:
        "200":
          description: Success verify phone number
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: success verify phone number
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyEmail:
                  summary: Invaid OTP
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: otp is invalid
                emptyPassword:
                  summary: Expired OTP
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: otp is expired
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate phone number verification
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              example:
                code: 409
                status: CONFLICT
                description: phone number already verified
  /businesses:
    post:
      summary: Register new business
      description: API for register new business
      tags:
        - Business
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBusinessRequest"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 201
                  status:
                    type: string
                    example: success register new business
                  data:
                    $ref: "#/components/schemas/Business"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyEmail:
                  summary: Empty name
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: "validation error: Name is required"
                emptyPhoneNumber:
                  summary: Empty phone number
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: "validation error: PhoneNumber is required"
                emptyName:
                  summary: Empty email
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: "validation error: Email is required"
                invalidPhoneNumberFormat:
                  summary: Invalid Phone Number
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: "validation error: PhoneNumber must be at least 11 characters long"
                invalidEmailFormat:
                  summary: Invalid Email Address
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: "validation error: Email must be a valid email address"
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
  /business/{businessId}:
    get:
      summary: Get business by id
      description: API for get business by id
      tags:
        - Business
      parameters:
        - in: path
          name: businessId
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 201
                  status:
                    type: string
                    example: success get business by id
                  data:
                    $ref: "#/components/schemas/Business"
  /store:
    post:
      summary: Register new Store
      description: API for register a new store
      tags:
        - Store
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterStoreRequest"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 201
                  status:
                    type: string
                    example: success register new business
                  data:
                    $ref: "#/components/schemas/Business"
  /categories:
    post:
      summary: Create New Category
      description: API for Create New Category
      tags:
        - Category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequest"
      responses:
        "201":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 201
                  status:
                    type: string
                    example: success create new category
                  data:
                    $ref: "#/components/schemas/Category"
        "400":
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
              examples:
                emptyName:
                  summary: Empty name
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: name can't be empty
                emptyBusinessId:
                  summary: Empty business id
                  value:
                    code: 400
                    status: BAD_REQUEST
                    description: business id can't be empty
        "401":
          description: Invalid credential
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthenticatedResponse"
        "403":
          description: No Permission
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedResponse"
        "409":
          description: Duplicate category name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateEntryResponse"
              example:
                code: 409
                status: CONFLICT
                description: category already exsist
components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: dedy@email.com
        password:
          type: string
          example: password123*
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: dedy@test.com
        phone_number:
          type: string
          example: 6284210485408
        name:
          type: string
          example: Dedy
        is_email_verified:
          type: boolean
          example: false
        email_verified_at:
          type: string
          example: null
        is_phone_number_verified:
          type: boolean
          example: false
        phone_number_verified_at:
          type: string
          example: null
        deactivated_at:
          type: string
          example: null
        last_login:
          type: string
          example: 2024-01-01T10:00:00+0700
        created_at:
          type: string
          example: 2024-01-01T10:00:00+0700
        created_by:
          type: integer
          example: 1
        updated_at:
          type: string
          example: De2024-01-01T10:00:00+0700
        updated_by:
          type: integer
          example: 1
    UserList:
      type: array
      items:
        $ref: "#/components/schemas/User"
    CreateUserRequest:
      type: object
      properties:
        email:
          type: string
          example: dedy@test.com
        password:
          type: string
          example: dedy123*
        name:
          type: string
          example: Dedy
        phone_number:
          type: string
          example: 6284210485408
    GetUserList:
      type: object
      properties:
        code:
          type: string
          example: 200
        message:
          type: string
          example: success get user lists
        data:
          $ref: "#/components/schemas/UserList"
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          example: Dedy
    UpdateEmailRequest:
      type: object
      properties:
        email:
          type: string
          example: dedy@test.com
    UpdatePasswordRequest:
      type: object
      properties:
        password:
          type: string
          example: password123*
    UpdatePhoneNumberRequest:
      type: object
      properties:
        phone_number:
          type: string
          example: 6284210485408
    VerifyEmailOrPhone:
      type: object
      properties:
        otp:
          type: string
          example: 123456
    Business:
      type: object
      properties:
        id:
          type: integer
          example: 1
        owner_user_id:
          type: integer
          example: 1
        email:
          type: string
          example: dedy@business.com
        name:
          type: string
          example: BusinessKu
        verified_at:
          type: string
          example: 2024-01-01T10:00:00+0700
        deactivated_at:
          type: string
          example: null
        created_at:
          type: string
          example: 2024-01-01T10:00:00+0700
        created_by:
          type: integer
          example: 1
        updated_at:
          type: string
          example: De2024-01-01T10:00:00+0700
        updated_by:
          type: integer
          example: 1
    CreateBusinessRequest:
      type: object
      properties:
        email:
          type: string
          example: dedy@business.com
        name:
          type: string
          example: BusinessKu
    Store:
      type: object
      properties:
        id:
          type: integer
          example: 1
        business_id:
          type: integer
          example: 1
        name:
          type: string
          example: BusinessKu - Central Park
        location:
          type: string
          example: Mall Central Park
        description:
          type: string
          example: Lalala yeyueye
        deactivated_at:
          type: string
          example: null
        created_at:
          type: string
          example: 2024-01-01T10:00:00+0700
        created_by:
          type: integer
          example: 1
        updated_at:
          type: string
          example: De2024-01-01T10:00:00+0700
        updated_by:
          type: integer
          example: 1
    RegisterStoreRequest:
      type: object
      properties:
        business_id:
          type: integer
          example: 1
        name:
          type: string
          example: BusinessKu - Central Park
        location:
          type: string
          example: Mall Central Park
        description:
          type: string
          example: Lalala yeyueye
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        business_id:
          type: integer
          example: 1
        name:
          type: string
          example: Pizza
        deactivated_at:
          type: string
          example: null
        created_at:
          type: string
          example: 2024-01-01T10:00:00+0700
        created_by:
          type: integer
          example: 1
        updated_at:
          type: string
          example: De2024-01-01T10:00:00+0700
        updated_by:
          type: integer
          example: 1
    CreateCategoryRequest:
      type: object
      properties:
        business_id:
          type: integer
          example: 1
        name:
          type: string
          example: Pizza
    BadRequestResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        description:
          type: string
    NotFoundResponse:
      type: object
      properties:
        code:
          type: integer
          example: 404
        status:
          type: string
          example: NOT_FOUND
        description:
          type: string
          example: user not found
    DuplicateEntryResponse:
      type: object
      properties:
        code:
          type: integer
        status:
          type: string
        description:
          type: string
    UnauthorizedResponse:
      type: object
      properties:
        code:
          type: integer
          example: 403
        status:
          type: string
          example: FORBIDDEN
    UnauthenticatedResponse:
      type: object
      properties:
        code:
          type: integer
          example: 401
        status:
          type: string
          example: UNAUTHENTICATED
